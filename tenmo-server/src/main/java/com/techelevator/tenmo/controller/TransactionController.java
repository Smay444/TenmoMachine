package com.techelevator.tenmo.controller;

import com.techelevator.tenmo.dao.AccountDao;
import com.techelevator.tenmo.dao.HistoryDao;
import com.techelevator.tenmo.dao.UserDao;
import com.techelevator.tenmo.model.Account;
import com.techelevator.tenmo.model.History;
import com.techelevator.tenmo.model.User;
import org.apache.coyote.Request;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpInputMessage;
import org.springframework.http.HttpStatus;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.server.ResponseStatusException;

import java.math.BigDecimal;
import java.security.Principal;
import java.util.ArrayList;
import java.util.List;

@RestController
@PreAuthorize("isAuthenticated()")
@RequestMapping("/transaction")
public class TransactionController {
    @Autowired
    private AccountDao accountDao;
    @Autowired
    private HistoryDao historyDao;
    @Autowired
    private UserDao userDao;

    @RequestMapping(path = "/list_users", method = RequestMethod.GET)
    public List<String> listUsers(){
        List<String> users = new ArrayList<>();

        List<User> doNotUseUsers = userDao.findAll();

        for(User user: doNotUseUsers){
            String userString = "User ID: " + user.getId() + ", Username: " + user.getUsername();
            users.add(userString);
        }

        return users;

    }

    @RequestMapping(path = "/{toUserId}/{amount}", method = RequestMethod.POST)
    public History transfer(Principal fromPrincipal, @PathVariable int toUserId,@PathVariable double amount){
        int fromUserId = userDao.findIdByUsername(fromPrincipal.getName());
        if(fromUserId == toUserId){
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "You can't send money to yourself!");
        }
        Account fromAccount = accountDao.getAccountByUserId(fromUserId);
        Account toAccount = accountDao.getAccountByUserId(toUserId);

        BigDecimal transferAmount = new BigDecimal("0");
        if(amount <= 0){
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Amount must be greater than zero!");
        }else {
            transferAmount = BigDecimal.valueOf(amount);
        }

        //Check if transfer amount is greater than account balance
        if(transferAmount.compareTo(fromAccount.getBalance()) == 1){
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Account must have transfer amount!");
        }

        //Update account balances
        fromAccount.setBalance(fromAccount.getBalance().subtract(transferAmount));
        toAccount.setBalance(toAccount.getBalance().add(transferAmount));
        accountDao.updateAccount(fromAccount);
        accountDao.updateAccount(toAccount);

        //Create transferHistory entry, date will be generated by sql
        History transferHistory = new History();
        transferHistory.setFromId(fromUserId);
        transferHistory.setToId(toUserId);
        transferHistory.setAmount(transferAmount);
        transferHistory.setStatus("Approved");

        History transferLog = historyDao.createHistory(transferHistory);

        return transferLog;
    }

    @RequestMapping(path = "", method = RequestMethod.GET)
    public List<History> listTransactionByUser(Principal principal){ //spring knows who i'm talking about it.
        //call out principal

        int userId = userDao.findIdByUsername(principal.getName());

        //return list of transactions
        return historyDao.getHistoryByUser(userId);
    }

    //getHistoryById
    @RequestMapping(path = "/{id}", method = RequestMethod.GET)
    public History getTransactionById (@PathVariable int id){

       History history = historyDao.getHistoryById(id);

       if (history == null){
           throw new ResponseStatusException(HttpStatus.NOT_FOUND, "TransactionId not found");
       } else {
           return history;
       }

    }
    }
